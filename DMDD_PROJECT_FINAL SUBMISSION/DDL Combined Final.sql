--DECLARE
--    t_count NUMBER := 0;
--BEGIN
    --select count(*) into t_count from user_tables where table_name='MBTA_CHARLIE';
    --if t_count > 0
    --   THEN execute immediate 'DROP TABLE MBTA_CHARLIE';
    --END IF;
--END;

begin 
execute immediate 'DROP TABLE MBTA_CHARLIE'; 
exception when others then null; 
end;
/
begin 
execute immediate 'DROP TABLE MBTA_PASSENGER'; 
exception when others then null; 
end;
/
begin 
execute immediate 'DROP TABLE MBTA_PASSENGERFREQUENCY'; 
exception when others then null; 
end;
/
begin 
execute immediate 'DROP TABLE MBTA_LOGIN'; 
exception when others then null; 
end;
/
begin 
execute immediate 'DROP TABLE MBTA_SCHEDULE'; 
exception when others then null; 
end;
/
begin 
execute immediate 'DROP TABLE MBTA_STATION'; 
exception when others then null; 
end;
/
begin 
execute immediate 'DROP TABLE MBTA_ROUTEINFO'; 
exception when others then null; 
end;
/
begin 
execute immediate 'DROP TABLE MBTA_TRAINCURRENTSTATUS'; 
exception when others then null; 
end;
/
begin 
execute immediate 'DROP TABLE MBTA_TRAININFO'; 
exception when others then null; 
end;
/
begin 
execute immediate 'DROP TABLE MBTA_TRANSACTION'; 
exception when others then null; 
end;
/
begin 
execute immediate 'DROP TABLE MBTA_TYPES'; 
exception when others then null; 
end;
/
begin 
execute immediate 'DROP TABLE MBTA_EMPLOYEE'; 
exception when others then null; 
end;
/
begin 
execute immediate 'DROP TABLE MBTA_EMPLOGIN'; 
exception when others then null; 
end;
/
begin 
execute immediate 'DROP TABLE MBTA_DEPT'; 
exception when others then null; 
end;
/
begin 
execute immediate 'DROP TABLE MBTA_DEPTTYPE'; 
exception when others then null; 
end;
/


--DROP table MBTA_CHARLIE;
--DROP TABLE MBTA_PASSENGER;
--DROP TABLE MBTA_PASSENGERFREQUENCY;
--DROP TABLE MBTA_LOGIN;
--DROP TABLE MBTA_SCHEDULE;
--DROP TABLE MBTA_STATION;
--DROP TABLE MBTA_ROUTEINFO;
--DROP TABLE MBTA_TRAINCURRENTSTATUS;
--DROP TABLE MBTA_TRAININFO;
--DROP TABLE MBTA_TRANSACTION;
--DROP TABLE MBTA_TYPES;
--DROP TABLE MBTA_EMPLOGIN;
--DROP TABLE MBTA_EMPLOYEE;
--DROP TABLE MBTA_DEPT;
--DROP TABLE MBTA_DEPTTYPE;

--------------------------------------------------------
--  DDL for Table MBTA_DEPTTYPE
--------------------------------------------------------

  CREATE TABLE "ADMIN"."MBTA_DEPTTYPE" 
   (	"DEPTTYPEID" NUMBER(*,0), 
	"DEPTNAME" VARCHAR2(50 BYTE) COLLATE "USING_NLS_COMP"
   )  DEFAULT COLLATION "USING_NLS_COMP" SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 10 MAXTRANS 255 
 COLUMN STORE COMPRESS FOR QUERY HIGH ROW LEVEL LOCKING LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index SYS_C0027598
--------------------------------------------------------

  CREATE UNIQUE INDEX "ADMIN"."SYS_C0027598" ON "ADMIN"."MBTA_DEPTTYPE" ("DEPTTYPEID") 
  PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  Constraints for Table MBTA_DEPTTYPE
--------------------------------------------------------

  ALTER TABLE "ADMIN"."MBTA_DEPTTYPE" MODIFY ("DEPTTYPEID" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_DEPTTYPE" MODIFY ("DEPTNAME" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_DEPTTYPE" ADD PRIMARY KEY ("DEPTTYPEID")
  USING INDEX PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;


--------------------------------------------------------
--  DDL for Table MBTA_DEPT
--------------------------------------------------------

  CREATE TABLE "ADMIN"."MBTA_DEPT" 
   (	"DEPTID" NUMBER(*,0), 
	"DEPTTYPEID" NUMBER(*,0), 
	"ROLE" NVARCHAR2(255) COLLATE "USING_NLS_COMP"
   )  DEFAULT COLLATION "USING_NLS_COMP" SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 10 MAXTRANS 255 
 COLUMN STORE COMPRESS FOR QUERY HIGH ROW LEVEL LOCKING LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index SYS_C0027631
--------------------------------------------------------

  CREATE UNIQUE INDEX "ADMIN"."SYS_C0027631" ON "ADMIN"."MBTA_DEPT" ("DEPTID") 
  PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  Constraints for Table MBTA_DEPT
--------------------------------------------------------

  ALTER TABLE "ADMIN"."MBTA_DEPT" MODIFY ("DEPTID" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_DEPT" MODIFY ("DEPTTYPEID" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_DEPT" ADD PRIMARY KEY ("DEPTID")
  USING INDEX PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table MBTA_DEPT
--------------------------------------------------------

  ALTER TABLE "ADMIN"."MBTA_DEPT" ADD FOREIGN KEY ("DEPTTYPEID")
	  REFERENCES "ADMIN"."MBTA_DEPTTYPE" ("DEPTTYPEID") ENABLE;


--------------------------------------------------------
--  DDL for Table MBTA_EMPLOGIN
--------------------------------------------------------

  CREATE TABLE "ADMIN"."MBTA_EMPLOGIN" 
   (	"LOGINID" NUMBER(*,0), 
	"EMPLOYEEID" NUMBER(*,0), 
	"USERNAME" VARCHAR2(25 BYTE) COLLATE "USING_NLS_COMP", 
	"PASSWORD" VARCHAR2(25 BYTE) COLLATE "USING_NLS_COMP"
   )  DEFAULT COLLATION "USING_NLS_COMP" SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 10 MAXTRANS 255 
 COLUMN STORE COMPRESS FOR QUERY HIGH ROW LEVEL LOCKING LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index SYS_C0027577
--------------------------------------------------------

  CREATE UNIQUE INDEX "ADMIN"."SYS_C0027577" ON "ADMIN"."MBTA_EMPLOGIN" ("LOGINID") 
  PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index UNK
--------------------------------------------------------

  CREATE UNIQUE INDEX "ADMIN"."UNK" ON "ADMIN"."MBTA_EMPLOGIN" ("EMPLOYEEID") 
  PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  Constraints for Table MBTA_EMPLOGIN
--------------------------------------------------------

  ALTER TABLE "ADMIN"."MBTA_EMPLOGIN" ADD CONSTRAINT "UNK" UNIQUE ("EMPLOYEEID")
  USING INDEX PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "ADMIN"."MBTA_EMPLOGIN" MODIFY ("LOGINID" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_EMPLOGIN" MODIFY ("EMPLOYEEID" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_EMPLOGIN" MODIFY ("USERNAME" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_EMPLOGIN" MODIFY ("PASSWORD" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_EMPLOGIN" ADD PRIMARY KEY ("LOGINID")
  USING INDEX PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  
  
  

  --------------------------------------------------------
--  DDL for Table MBTA_EMPLOYEE
--------------------------------------------------------

  CREATE TABLE "ADMIN"."MBTA_EMPLOYEE" 
   (	"EMPLOYEEID" NUMBER(*,0), 
	"DEPTID" NUMBER(*,0), 
	"TRAINID" NUMBER(*,0), 
	"NAME" VARCHAR2(50 BYTE) COLLATE "USING_NLS_COMP", 
	"AGE" NUMBER(*,0), 
	"ADDRESS" VARCHAR2(50 BYTE) COLLATE "USING_NLS_COMP", 
	"CITY" VARCHAR2(50 BYTE) COLLATE "USING_NLS_COMP", 
	"STATE" VARCHAR2(50 BYTE) COLLATE "USING_NLS_COMP", 
	"ZIPCODE" NUMBER(*,0), 
	"DOJ" DATE
   )  DEFAULT COLLATION "USING_NLS_COMP" SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 10 MAXTRANS 255 
 COLUMN STORE COMPRESS FOR QUERY HIGH ROW LEVEL LOCKING LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index SYS_C0027595
--------------------------------------------------------

  CREATE UNIQUE INDEX "ADMIN"."SYS_C0027595" ON "ADMIN"."MBTA_EMPLOYEE" ("EMPLOYEEID") 
  PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;

--------------------------------------------------------
--  Constraints for Table MBTA_EMPLOYEE
--------------------------------------------------------

  ALTER TABLE "ADMIN"."MBTA_EMPLOYEE" MODIFY ("EMPLOYEEID" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_EMPLOYEE" MODIFY ("DEPTID" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_EMPLOYEE" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_EMPLOYEE" MODIFY ("ADDRESS" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_EMPLOYEE" MODIFY ("CITY" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_EMPLOYEE" MODIFY ("STATE" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_EMPLOYEE" MODIFY ("ZIPCODE" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_EMPLOYEE" MODIFY ("DOJ" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_EMPLOYEE" ADD PRIMARY KEY ("EMPLOYEEID")
  USING INDEX PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table MBTA_EMPLOYEE
--------------------------------------------------------

  ALTER TABLE "ADMIN"."MBTA_EMPLOYEE" ADD CONSTRAINT "FK_EMP_EMPLOGIN" FOREIGN KEY ("EMPLOYEEID")
	  REFERENCES "ADMIN"."MBTA_EMPLOGIN" ("EMPLOYEEID") ENABLE;
  ALTER TABLE "ADMIN"."MBTA_EMPLOYEE" ADD FOREIGN KEY ("DEPTID")
	  REFERENCES "ADMIN"."MBTA_DEPT" ("DEPTID") ENABLE;


-------------------------------------Saksheee Part-----------------------------------------

--------------------------------------------------------
--  DDL for Table MBTA_LOGIN
--------------------------------------------------------

  CREATE TABLE "ADMIN"."MBTA_LOGIN" 
   (	"LOGINID" NUMBER(*,0), 
	"PASSENGERID" NUMBER(*,0), 
	"USERNAME" VARCHAR2(25 BYTE) COLLATE "USING_NLS_COMP", 
	"PASSWORD" VARCHAR2(25 BYTE) COLLATE "USING_NLS_COMP"
   )  DEFAULT COLLATION "USING_NLS_COMP" SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 10 MAXTRANS 255 
 COLUMN STORE COMPRESS FOR QUERY HIGH ROW LEVEL LOCKING LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index SYS_C0027572
--------------------------------------------------------

  CREATE UNIQUE INDEX "ADMIN"."SYS_C0027572" ON "ADMIN"."MBTA_LOGIN" ("LOGINID") 
  PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index SYS_C0027635
--------------------------------------------------------

  CREATE UNIQUE INDEX "ADMIN"."SYS_C0027635" ON "ADMIN"."MBTA_LOGIN" ("PASSENGERID") 
  PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  Constraints for Table MBTA_LOGIN
--------------------------------------------------------

  ALTER TABLE "ADMIN"."MBTA_LOGIN" MODIFY ("LOGINID" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_LOGIN" MODIFY ("PASSENGERID" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_LOGIN" MODIFY ("USERNAME" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_LOGIN" MODIFY ("PASSWORD" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_LOGIN" ADD PRIMARY KEY ("LOGINID")
  USING INDEX PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "ADMIN"."MBTA_LOGIN" ADD UNIQUE ("PASSENGERID")
  USING INDEX PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;


--------------------------------------------------------
--  DDL for Table MBTA_PASSENGER
--------------------------------------------------------

  CREATE TABLE "ADMIN"."MBTA_PASSENGER" 
   (	"PASSENGERID" NUMBER(*,0), 
	"PASSENGERFNAME" VARCHAR2(25 BYTE) COLLATE "USING_NLS_COMP", 
	"PASSENGERLNAME" VARCHAR2(25 BYTE) COLLATE "USING_NLS_COMP", 
	"DOB" DATE, 
	"ADDRESS" NVARCHAR2(255) COLLATE "USING_NLS_COMP", 
	"CITY" NVARCHAR2(255) COLLATE "USING_NLS_COMP", 
	"STATE" NVARCHAR2(255) COLLATE "USING_NLS_COMP", 
	"ZIPCODE" NUMBER(*,0)
   )  DEFAULT COLLATION "USING_NLS_COMP" SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 10 MAXTRANS 255 
 COLUMN STORE COMPRESS FOR QUERY HIGH ROW LEVEL LOCKING LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index SYS_C0027628
--------------------------------------------------------

  CREATE UNIQUE INDEX "ADMIN"."SYS_C0027628" ON "ADMIN"."MBTA_PASSENGER" ("PASSENGERID") 
  PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;


--------------------------------------------------------
--  Constraints for Table MBTA_PASSENGER
--------------------------------------------------------

  ALTER TABLE "ADMIN"."MBTA_PASSENGER" MODIFY ("PASSENGERID" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_PASSENGER" MODIFY ("PASSENGERFNAME" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_PASSENGER" MODIFY ("PASSENGERLNAME" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_PASSENGER" MODIFY ("DOB" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_PASSENGER" MODIFY ("ADDRESS" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_PASSENGER" MODIFY ("CITY" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_PASSENGER" MODIFY ("STATE" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_PASSENGER" MODIFY ("ZIPCODE" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_PASSENGER" ADD PRIMARY KEY ("PASSENGERID")
  USING INDEX PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table MBTA_PASSENGER
--------------------------------------------------------

  ALTER TABLE "ADMIN"."MBTA_PASSENGER" ADD FOREIGN KEY ("PASSENGERID")
	  REFERENCES "ADMIN"."MBTA_LOGIN" ("PASSENGERID") ENABLE;



--------------------------------------------------------
--  DDL for Table MBTA_CHARLIE
--------------------------------------------------------

  CREATE TABLE "ADMIN"."MBTA_CHARLIE" 
   (	"CHARLIEID" NUMBER(*,0), 
	"PASSENGERID" NUMBER(*,0), 
	"BALANCE" NUMBER(*,0), 
	"CARDNUMBER" NUMBER(*,0), 
	"CVVNO" NUMBER(*,0), 
	"EXPIRATIONDATE" DATE, 
	"TRANCHEID" NUMBER
   )  DEFAULT COLLATION "USING_NLS_COMP" SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 10 MAXTRANS 255 
 COLUMN STORE COMPRESS FOR QUERY HIGH ROW LEVEL LOCKING LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index SYS_C0027582
--------------------------------------------------------

  CREATE UNIQUE INDEX "ADMIN"."SYS_C0027582" ON "ADMIN"."MBTA_CHARLIE" ("CHARLIEID") 
  PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  Constraints for Table MBTA_CHARLIE
--------------------------------------------------------

  ALTER TABLE "ADMIN"."MBTA_CHARLIE" MODIFY ("CHARLIEID" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_CHARLIE" MODIFY ("PASSENGERID" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_CHARLIE" ADD PRIMARY KEY ("CHARLIEID")
  USING INDEX PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table MBTA_CHARLIE
--------------------------------------------------------

  ALTER TABLE "ADMIN"."MBTA_CHARLIE" ADD FOREIGN KEY ("PASSENGERID")
	  REFERENCES "ADMIN"."MBTA_PASSENGER" ("PASSENGERID") ENABLE;


--------------------------------------------------------
--  DDL for Table MBTA_TRANSACTION
--------------------------------------------------------

  CREATE TABLE "ADMIN"."MBTA_TRANSACTION" 
   (	"TRANSACTIONID" NUMBER(*,0), 
	"PASSENGERID" NUMBER(*,0), 
	"AMOUNT" NUMBER(*,0), 
	"TRANCHEID" NUMBER
   )  DEFAULT COLLATION "USING_NLS_COMP" SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 10 MAXTRANS 255 
 COLUMN STORE COMPRESS FOR QUERY HIGH ROW LEVEL LOCKING LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index MBTA_TRANSACTION_INDEX
--------------------------------------------------------

  CREATE INDEX "ADMIN"."MBTA_TRANSACTION_INDEX" ON "ADMIN"."MBTA_TRANSACTION" ("TRANCHEID") 
  PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index SYS_C0027585
--------------------------------------------------------

  CREATE UNIQUE INDEX "ADMIN"."SYS_C0027585" ON "ADMIN"."MBTA_TRANSACTION" ("TRANSACTIONID") 
  PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  Constraints for Table MBTA_TRANSACTION
--------------------------------------------------------

  ALTER TABLE "ADMIN"."MBTA_TRANSACTION" MODIFY ("TRANSACTIONID" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_TRANSACTION" MODIFY ("PASSENGERID" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_TRANSACTION" ADD PRIMARY KEY ("TRANSACTIONID")
  USING INDEX PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;


--------------------------------------------------------
--  DDL for Table MBTA_PASSENGERFREQUENCY
--------------------------------------------------------

--------------------------------------------------------
--  DDL for Table MBTA_STATION
--------------------------------------------------------

  CREATE TABLE "ADMIN"."MBTA_STATION" 
   (	"STATIONID" NUMBER(*,0), 
	"ROUTEID" NUMBER(*,0), 
	"STATIONNAME" VARCHAR2(50 BYTE) COLLATE "USING_NLS_COMP", 
	"STATIONZIPCODE" NUMBER(*,0), 
	"LATITUDE" VARCHAR2(20 BYTE) COLLATE "USING_NLS_COMP", 
	"LONGITUDE" VARCHAR2(20 BYTE) COLLATE "USING_NLS_COMP", 
	"STATUS" CHAR(1 BYTE) COLLATE "USING_NLS_COMP", 
	"STATIONSEQ" NUMBER(5,0), 
	"PREVSEQ" NUMBER(5,0)
   )  DEFAULT COLLATION "USING_NLS_COMP" SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 10 MAXTRANS 255 
 COLUMN STORE COMPRESS FOR QUERY HIGH ROW LEVEL LOCKING LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index SYS_C0027619
--------------------------------------------------------

  CREATE UNIQUE INDEX "ADMIN"."SYS_C0027619" ON "ADMIN"."MBTA_STATION" ("STATIONID") 
  PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  Constraints for Table MBTA_STATION
--------------------------------------------------------

  ALTER TABLE "ADMIN"."MBTA_STATION" ADD CHECK (status in ('Y','N')) ENABLE;
  ALTER TABLE "ADMIN"."MBTA_STATION" MODIFY ("STATIONID" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_STATION" MODIFY ("ROUTEID" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_STATION" MODIFY ("STATIONNAME" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_STATION" MODIFY ("STATIONZIPCODE" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_STATION" ADD PRIMARY KEY ("STATIONID")
  USING INDEX PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;



  CREATE TABLE "ADMIN"."MBTA_PASSENGERFREQUENCY" 
   (	"FREQUENCYID" NUMBER(*,0), 
	"STATIONID" NUMBER(*,0), 
	"AVGSEC" NUMBER(5,2), 
	"STDSEC" NUMBER(5,2), 
	"DAYTYPE" VARCHAR2(50 BYTE) COLLATE "USING_NLS_COMP", 
	"PASSENGERID" NUMBER(*,0), 
	"PEAKINDEX" VARCHAR2(50 BYTE) COLLATE "USING_NLS_COMP"
   )  DEFAULT COLLATION "USING_NLS_COMP" SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 10 MAXTRANS 255 
 COLUMN STORE COMPRESS FOR QUERY HIGH ROW LEVEL LOCKING LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index SYS_C0027563
--------------------------------------------------------

  CREATE UNIQUE INDEX "ADMIN"."SYS_C0027563" ON "ADMIN"."MBTA_PASSENGERFREQUENCY" ("FREQUENCYID") 
  PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  Constraints for Table MBTA_PASSENGERFREQUENCY
--------------------------------------------------------

  ALTER TABLE "ADMIN"."MBTA_PASSENGERFREQUENCY" MODIFY ("FREQUENCYID" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_PASSENGERFREQUENCY" MODIFY ("STATIONID" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_PASSENGERFREQUENCY" MODIFY ("AVGSEC" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_PASSENGERFREQUENCY" MODIFY ("STDSEC" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_PASSENGERFREQUENCY" MODIFY ("DAYTYPE" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_PASSENGERFREQUENCY" MODIFY ("PASSENGERID" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_PASSENGERFREQUENCY" ADD PRIMARY KEY ("FREQUENCYID")
  USING INDEX PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table MBTA_PASSENGERFREQUENCY
--------------------------------------------------------

  ALTER TABLE "ADMIN"."MBTA_PASSENGERFREQUENCY" ADD FOREIGN KEY ("STATIONID")
	  REFERENCES "ADMIN"."MBTA_STATION" ("STATIONID") ENABLE;


--------------------------------------------------------
--  DDL for Table MBTA_TYPES
--------------------------------------------------------

  CREATE TABLE "ADMIN"."MBTA_TYPES" 
   (	"TYPEID" NUMBER(*,0), 
	"TYPENAME" VARCHAR2(25 BYTE) COLLATE "USING_NLS_COMP"
   )  DEFAULT COLLATION "USING_NLS_COMP" SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 10 MAXTRANS 255 
 COLUMN STORE COMPRESS FOR QUERY HIGH ROW LEVEL LOCKING LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index SYS_C0027555
--------------------------------------------------------

  CREATE UNIQUE INDEX "ADMIN"."SYS_C0027555" ON "ADMIN"."MBTA_TYPES" ("TYPEID") 
  PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  Constraints for Table MBTA_TYPES
--------------------------------------------------------

  ALTER TABLE "ADMIN"."MBTA_TYPES" MODIFY ("TYPEID" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_TYPES" MODIFY ("TYPENAME" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_TYPES" ADD PRIMARY KEY ("TYPEID")
  USING INDEX PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;


--------------------------------------------------------
--  DDL for Table MBTA_ROUTEINFO
--------------------------------------------------------

  CREATE TABLE "ADMIN"."MBTA_ROUTEINFO" 
   (	"ROUTEID" NUMBER(*,0), 
	"TYPEID" NUMBER(*,0), 
	"ROUTE_FROM" VARCHAR2(50 BYTE) COLLATE "USING_NLS_COMP", 
	"ROUTE_TO" VARCHAR2(50 BYTE) COLLATE "USING_NLS_COMP", 
	"DURATION" NUMBER(*,0)
   )  DEFAULT COLLATION "USING_NLS_COMP" SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 10 MAXTRANS 255 
 COLUMN STORE COMPRESS FOR QUERY HIGH ROW LEVEL LOCKING LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index SYS_C0027552
--------------------------------------------------------

  CREATE UNIQUE INDEX "ADMIN"."SYS_C0027552" ON "ADMIN"."MBTA_ROUTEINFO" ("ROUTEID") 
  PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  Constraints for Table MBTA_ROUTEINFO
--------------------------------------------------------

  ALTER TABLE "ADMIN"."MBTA_ROUTEINFO" MODIFY ("ROUTEID" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_ROUTEINFO" MODIFY ("TYPEID" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_ROUTEINFO" MODIFY ("ROUTE_FROM" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_ROUTEINFO" MODIFY ("ROUTE_TO" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_ROUTEINFO" MODIFY ("DURATION" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_ROUTEINFO" ADD PRIMARY KEY ("ROUTEID")
  USING INDEX PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table MBTA_ROUTEINFO
--------------------------------------------------------

  ALTER TABLE "ADMIN"."MBTA_ROUTEINFO" ADD FOREIGN KEY ("TYPEID")
	  REFERENCES "ADMIN"."MBTA_TYPES" ("TYPEID") ENABLE;
      
--------------------------------------------------------
--  Ref Constraints for Table MBTA_STATION
--------------------------------------------------------

  ALTER TABLE "ADMIN"."MBTA_STATION" ADD FOREIGN KEY ("ROUTEID")
	  REFERENCES "ADMIN"."MBTA_ROUTEINFO" ("ROUTEID") ENABLE;

--------------------------------------------------------
--  DDL for Table MBTA_TRAININFO
--------------------------------------------------------

  CREATE TABLE "ADMIN"."MBTA_TRAININFO" 
   (	"TRAINID" NUMBER(*,0), 
	"TRAINSERIALNO" NUMBER(*,0), 
	"YEAROFMANUFACTURING" NUMBER(4,0), 
	"LASTSERVICEDATE" DATE, 
	"CAPACITY" NUMBER(*,0), 
	"EMPLOYEEID" NUMBER(*,0)
   )  DEFAULT COLLATION "USING_NLS_COMP" SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 10 MAXTRANS 255 
 COLUMN STORE COMPRESS FOR QUERY HIGH ROW LEVEL LOCKING LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index SYS_C0027539
--------------------------------------------------------

  CREATE UNIQUE INDEX "ADMIN"."SYS_C0027539" ON "ADMIN"."MBTA_TRAININFO" ("TRAINID") 
  PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  Constraints for Table MBTA_TRAININFO
--------------------------------------------------------

  ALTER TABLE "ADMIN"."MBTA_TRAININFO" MODIFY ("TRAINID" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_TRAININFO" MODIFY ("TRAINSERIALNO" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_TRAININFO" MODIFY ("YEAROFMANUFACTURING" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_TRAININFO" MODIFY ("CAPACITY" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_TRAININFO" MODIFY ("EMPLOYEEID" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_TRAININFO" ADD PRIMARY KEY ("TRAINID")
  USING INDEX PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table MBTA_TRAININFO
--------------------------------------------------------

  ALTER TABLE "ADMIN"."MBTA_TRAININFO" ADD FOREIGN KEY ("EMPLOYEEID")
	  REFERENCES "ADMIN"."MBTA_EMPLOYEE" ("EMPLOYEEID") ENABLE;


--------------------------------------------------------
--  DDL for Table MBTA_SCHEDULE
--------------------------------------------------------

  CREATE TABLE "ADMIN"."MBTA_SCHEDULE" 
   (	"SCHEDULEID" NUMBER(*,0), 
	"TRAINID" NUMBER(*,0), 
	"ROUTEID" NUMBER(*,0), 
	"TRAINTIME" VARCHAR2(50 BYTE) COLLATE "USING_NLS_COMP"
   )  DEFAULT COLLATION "USING_NLS_COMP" SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 10 MAXTRANS 255 
 COLUMN STORE COMPRESS FOR QUERY HIGH ROW LEVEL LOCKING LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index SYS_C0027544
--------------------------------------------------------

  CREATE UNIQUE INDEX "ADMIN"."SYS_C0027544" ON "ADMIN"."MBTA_SCHEDULE" ("SCHEDULEID") 
  PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  Constraints for Table MBTA_SCHEDULE
--------------------------------------------------------

  ALTER TABLE "ADMIN"."MBTA_SCHEDULE" MODIFY ("SCHEDULEID" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_SCHEDULE" MODIFY ("TRAINID" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_SCHEDULE" MODIFY ("ROUTEID" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_SCHEDULE" MODIFY ("TRAINTIME" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_SCHEDULE" ADD PRIMARY KEY ("SCHEDULEID")
  USING INDEX PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table MBTA_SCHEDULE
--------------------------------------------------------

  ALTER TABLE "ADMIN"."MBTA_SCHEDULE" ADD FOREIGN KEY ("TRAINID")
	  REFERENCES "ADMIN"."MBTA_TRAININFO" ("TRAINID") ENABLE;
  ALTER TABLE "ADMIN"."MBTA_SCHEDULE" ADD FOREIGN KEY ("ROUTEID")
	  REFERENCES "ADMIN"."MBTA_ROUTEINFO" ("ROUTEID") ENABLE;





--------------------------------------------------------
--  DDL for Table MBTA_TRAINCURRENTSTATUS
--------------------------------------------------------

  CREATE TABLE "ADMIN"."MBTA_TRAINCURRENTSTATUS" 
   (	"TRAINCURRENTSTATUSID" NUMBER(*,0), 
	"LATITUDE" VARCHAR2(20 BYTE) COLLATE "USING_NLS_COMP", 
	"LONGITUDE" VARCHAR2(20 BYTE) COLLATE "USING_NLS_COMP", 
	"TRAINID" NUMBER
   )  DEFAULT COLLATION "USING_NLS_COMP" SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 10 MAXTRANS 255 
 COLUMN STORE COMPRESS FOR QUERY HIGH ROW LEVEL LOCKING LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index SYS_C0027567
--------------------------------------------------------

  CREATE UNIQUE INDEX "ADMIN"."SYS_C0027567" ON "ADMIN"."MBTA_TRAINCURRENTSTATUS" ("TRAINCURRENTSTATUSID") 
  PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  Constraints for Table MBTA_TRAINCURRENTSTATUS
--------------------------------------------------------

  ALTER TABLE "ADMIN"."MBTA_TRAINCURRENTSTATUS" MODIFY ("TRAINCURRENTSTATUSID" NOT NULL ENABLE);
  ALTER TABLE "ADMIN"."MBTA_TRAINCURRENTSTATUS" ADD PRIMARY KEY ("TRAINCURRENTSTATUSID")
  USING INDEX PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table MBTA_TRAINCURRENTSTATUS
--------------------------------------------------------

  ALTER TABLE "ADMIN"."MBTA_TRAINCURRENTSTATUS" ADD FOREIGN KEY ("TRAINID")
	  REFERENCES "ADMIN"."MBTA_TRAININFO" ("TRAINID") ENABLE;
      
      
--------------------------------------------------------
--  DDL for Trigger DELETE_PASSENGER
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "ADMIN"."DELETE_PASSENGER" 
after delete 
on mbta_passenger 
for each row
declare
begin 
delete from mbta_login where passengerid=:old.passengerid;
delete from mbta_charlie where passengerid=:old.passengerid;
end;

/      
ALTER TRIGGER "ADMIN"."DELETE_PASSENGER" ENABLE;

--------------------------------------------------------
--  DDL for Trigger DELETE_EMPLOYEE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "ADMIN"."DELETE_EMPLOYEE" 
before delete
on mbta_employee
for each row 
declare 
begin
delete from mbta_emplogin where employeeid=:old.employeeid;
end;
/
ALTER TRIGGER "ADMIN"."DELETE_EMPLOYEE" ENABLE;


-------------------------------------------------------------------------------------------------------------------------
--Function to authenticate employee
--Sample Usage: 
--DECLARE
--    emp_id number := 0;
--BEGIN
--    emp_id := authenticate_employee('hgodin61', '30ZIwv3V5R7');
--    DBMS_OUTPUT.PUT_LINE('Employee ID: ' || emp_id);
--END;
-------------------------------------------------------------------------------------------------------------------------
SET SERVEROUTPUT ON;
CREATE OR REPLACE FUNCTION authenticate_employee(uname in mbta_emplogin.username%type, pwd in mbta_emplogin.password%type)
RETURN NUMBER
IS
employee_id NUMBER := 0;
BEGIN
SELECT MAX(employeeid) INTO employee_id from MBTA_EMPLOGIN WHERE UserName = uname AND Password = pwd;
return NVL(employee_id, 0);
end authenticate_employee;
/

-------------------------------------------------------------------------------------------------------------------------
--Function to authenticate passenger
--Sample Usage: 
--DECLARE
--    pass_id number := 0;
--BEGIN
--    pass_id := authenticate_passenger('hgodin61', '30ZIwv3V5R7');
--    DBMS_OUTPUT.PUT_LINE('Passenger ID: ' || pass_id);
--END;
-------------------------------------------------------------------------------------------------------------------------
SET SERVEROUTPUT ON;
CREATE OR REPLACE FUNCTION authenticate_passenger(uname in mbta_login.username%type, pwd in mbta_login.password%type)
RETURN NUMBER
IS
passenger_id NUMBER := 0;
BEGIN
SELECT MAX(passengerid) INTO passenger_id from MBTA_LOGIN WHERE UserName = uname AND Password = pwd;
return NVL(passenger_id, 0);
end authenticate_passenger;
/

-------------------------------------------------------------------------------------------------------------------------
--Function to get Charlie Card Balance
--Sample Usage: 
--DECLARE
--    charlie_balance Number := 0;
--BEGIN
--    charlie_balance :=get_charlie_balance(218);
--    DBMS_OUTPUT.PUT_LINE('Charlie Balance: ' || charlie_balance);    
--END;
-------------------------------------------------------------------------------------------------------------------------
SET SERVEROUTPUT ON;
CREATE OR REPLACE FUNCTION get_charlie_balance(passid in mbta_charlie.passengerid%type)
RETURN NUMBER
IS
charlie_balance NUMBER := 0;
BEGIN
SELECT SUM(BALANCE) INTO charlie_balance from MBTA_CHARLIE where passengerid=passid;
return NVL(charlie_balance, 0);
end get_charlie_balance;
/


-------------------------------------------------------------------------------------------------------------------------
--Function to check if Passenger ID exists
-------------------------------------------------------------------------------------------------------------------------

SET SERVEROUTPUT ON;
create or replace function check_pass_id(pid in mbta_passenger.passengerid%type)
return int
is 
check_pass int;
begin
select count(1) into check_pass from mbta_passenger where passengerid=pid;
return check_pass;
end check_pass_id;
/

--Function to 

create or replace function check_date_format(str in Varchar2)
return int
is
begin
if(regexp_like(str,'^.*:*.:.*$'))then
return 1;
else
return 0;
end if;
end check_date_format;
/

--select check_date_format('21:34:43') from dual;

--Function to
create or replace function next_trainid_traininfo
return int
is
next_trainid int;
begin
select trainid into next_trainid from mbta_traininfo where trainid in (select max(trainid) from mbta_traininfo);
return next_trainid+1;
end next_trainid_traininfo;
/

--select next_trainid_traininfo from dual;

--Function to 
create or replace function next_trainserialno_traininfo
return int
is
next_trainserialno int;
begin
select trainserialno into next_trainserialno from mbta_traininfo where trainserialno in (select max(trainserialno) from mbta_traininfo);
return next_trainserialno+1;
end next_trainserialno_traininfo;
/

--select next_trainserialno_traininfo from dual;

--Function to
create or replace function check_service_manu(yearofmanu_in in number,lastservicedate_in  in date)
return int
is 
check_year int;
begin
select extract(year from to_date(lastservicedate_in,'DD-MON-YY')) into check_year from dual;
if(check_year>yearofmanu_in)then
dbms_output.put_line('Not valid year');
return 1;
else
return 0;
end if;
end check_service_manu;
/


--service date greater than manufacturing year
--select check_service_manu(2021,'24-Jan-2020') from dual; 
--service date less than manufacturing year
--select check_service_manu(2020,'24-Jan-2021') from dual; 

--Function to

create or replace function check_employee_id(empid in mbta_employee.employeeid%type)
return int
is 
check_emp int;
begin
select count(*) into check_emp from mbta_employee where employeeid=empid;
return check_emp;
end check_employee_id;
/

--select check_employee_id(1) from dual;

--select check_employee_id(1999) from dual;


--Function to

create or replace FUNCTION distance (Lat1 IN NUMBER,
                                     Lon1 IN NUMBER,
                                     Lat2 IN NUMBER,
                                     Lon2 IN NUMBER,
                                     Radius IN NUMBER DEFAULT 3963) RETURN NUMBER IS
 -- Convert degrees to radians
 DegToRad NUMBER := 57.29577951;

BEGIN
  RETURN(NVL(Radius,0) * ACOS((sin(NVL(Lat1,0) / DegToRad) * SIN(NVL(Lat2,0) / DegToRad)) +
        (COS(NVL(Lat1,0) / DegToRad) * COS(NVL(Lat2,0) / DegToRad) *
         COS(NVL(Lon2,0) / DegToRad - NVL(Lon1,0)/ DegToRad))));
END;
/




----- check next train

--create or replace function check_next_train_for_route(route_id in mbta_schedule.routeid%type, start_time in mbta_schedule.traintime%type)
--return int 
--is next_train_id INT;
--begin

--select TRAINID into next_train_id from mbta_schedule where traintime > start_time and route_id=routeid and trainid in(select max(trainid) from mbta_schedule);

--return next_train_id;

--end check_next_train_for_route;


--select check_next_train_for_route(2,to_char(systimestamp,'HH:MM:SS')) from dual;

--desc mbta_schedule;

begin 
execute immediate 'DROP SEQUENCE seq_mbta_traincurrentstatus'; 
exception when others then null; 
end;
/

begin 
execute immediate 'DROP SEQUENCE seq_mbta_station'; 
exception when others then null; 
end;
/

Create Sequence seq_mbta_traincurrentstatus start with 1 increment by 1;
Create Sequence seq_mbta_station start with 1 increment by 1;



----------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------
--Description: Stored Procedure to Create a new department type. 

--SAMPLE USAGE:
--BEGIN
--        mbta_CreateDeptType ('Servicing');
        
--     END;
----------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------

SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE mbta_CreateDeptType
(
    DeptTypeName IN VARCHAR2
)
IS LastDeptTypeId NUMBER := 0;
IsRecordPresent NUMBER :=0;
DeptExists EXCEPTION;
BEGIN

SELECT COUNT(1) INTO IsRecordPresent FROM MBTA_DEPTTYPE WHERE deptname = DeptTypeName;
IF isrecordpresent>0
THEN  RAISE DeptExists;
ELSE 


SELECT MAX(depttypeid) INTO lastdepttypeid FROM MBTA_DEPTTYPE;


INSERT INTO mbta_depttype (depttypeid, deptname) 
VALUES (LastDeptTypeId+1,DeptTypeName);
COMMIT;
END IF;

EXCEPTION
 WHEN DeptExists THEN
        DBMS_OUTPUT.PUT_LINE('Error: Department Type is Already Present. No updates were made.');
    WHEN OTHERS THEN
        ROLLBACK;
END mbta_CreateDeptType;
/

/*
--SAMPLE EXECUTION SCRIPTS
call mbta_createdepttype ('Servicing');
call mbta_createdepttype ('Guards');
*/
----------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------
--Description: Stored Procedure to Create a new department. 

--SAMPLE USAGE:
--BEGIN
--    mbta_CreateDept('Servicing', 'Driver');
--END;
----------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------

SET SERVEROUTPUT ON;
create or replace PROCEDURE mbta_CreateDept
(
InDeptName IN VARCHAR2,
RoleInDept IN VARCHAR2
)
IS DtId NUMBER :=0;
IsDTypeRecordPresent NUMBER := 0;
IsRecordPresent NUMBER :=0;
LastDeptId NUMBER := 0;
DeptExists EXCEPTION;
InvalidDeptTypeEx EXCEPTION;

BEGIN

SELECT COUNT(1) INTO IsDTypeRecordPresent FROM mbta_depttype WHERE DEPTNAME=InDeptName;
IF IsDTypeRecordPresent = 0
THEN RAISE InvalidDeptTypeEx;
END IF;

SELECT MIN(DEPTTYPEID) INTO DtId FROM mbta_depttype WHERE DEPTNAME=InDeptName;

IF DtId IS NULL OR DtId = 0 
THEN RAISE InvalidDeptTypeEx;
END IF;

SELECT COUNT(1) INTO IsRecordPresent FROM MBTA_DEPT WHERE DeptTypeId = DtId AND ROLE = RoleInDept;

IF isrecordpresent>0
THEN  RAISE DeptExists;
ELSE 

SELECT MAX(DEPTID) INTO LastDeptId FROM MBTA_DEPT;
INSERT INTO MBTA_DEPT(deptid, depttypeid,Role)
VALUES (LastDeptId+1, DtId,RoleInDept);
COMMIT;

END IF;

EXCEPTION
    WHEN InvalidDeptTypeEx THEN
        DBMS_OUTPUT.PUT_LINE('Error: Department Type does not exist. No updates were made.');
    WHEN DeptExists THEN
        DBMS_OUTPUT.PUT_LINE('Error: This Department is Already Present. No updates were made.');
    WHEN OTHERS THEN
        ROLLBACK;
END mbta_CreateDept;
/

/*
--SAMPLE EXECUTION SCRIPTS
call mbta_createdept('Servicing', 'Red Line Servicemen');
call mbta_createdept('Guards', 'Red Line Guards');
*/
----------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------
--Description: Stored Procedure to Create or Update Employee Login. 
--Author: Priyanka Kuklani 
--SAMPLE USAGE:
--      DECLARE 
--          GeneratedEmployeeID NUMBER :=0;
--          EmployeeExists NUMBER :=0;
--      BEGIN
--          mbta_CreateOrUpdateEmployeeLogin (200, 'user200', 'Pa$$w0rd.1', GeneratedEmployeeID, EmployeeExists);
--          DBMS_OUTPUT.PUT_LINE(GeneratedEmployeeID);
--          DBMS_OUTPUT.PUT_LINE(EmployeeExists);
--      END;
----------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE mbta_CreateOrUpdateEmployeeLogin (
EmpId IN NUMBER,
UsrName IN VARCHAR2,
Pwd IN VARCHAR2,
GenEmpID OUT NUMBER,
LoginExists OUT NUMBER 
)
IS 
    LastLoginID NUMBER := 0;
    LastEmployeeID NUMBER := 0;
    userNameAlreadyTaken NUMBER := 0;
    userNameAlreadyTakenEx EXCEPTION;
BEGIN
    SELECT COUNT(1) INTO LoginExists FROM MBTA_EMPLOGIN WHERE EmployeeID = EmpId;
    IF NVL(LoginExists, 0) > 0
    THEN
        UPDATE MBTA_EMPLOGIN 
        SET 
            PASSWORD = Pwd
        WHERE EmployeeID = EmpId
        RETURNING EmployeeID INTO GenEmpID;
    ELSE
        SELECT COUNT(1) INTO userNameAlreadyTaken FROM MBTA_EMPLOGIN WHERE UserName = UsrName;
        IF userNameAlreadyTaken > 0
        THEN RAISE userNameAlreadyTakenEx;
        END IF;
        SELECT MAX(LOGINID) INTO LastLoginID FROM MBTA_EMPLOGIN;
        SELECT MAX(EMPLOYEEID) INTO LastEmployeeID FROM MBTA_EMPLOGIN;
        INSERT INTO MBTA_EMPLOGIN VALUES (LastLoginID + 1, LastEmployeeID + 1, UsrName, Pwd)
        RETURNING EmployeeID INTO GenEmpID;
    END IF;
    COMMIT;
EXCEPTION
    WHEN userNameAlreadyTakenEx THEN
        DBMS_OUTPUT.PUT_LINE('Error: User Name Already Taken. Please try with another user name. No updates were made.');
    WHEN OTHERS THEN
        ROLLBACK;
END mbta_CreateOrUpdateEmployeeLogin;
/

----------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------
--Description: Stored Procedure to Create or Update Employee Profile. 
--             If Employee ID passed exists, the same record will be updated with the input values passed.
--             If Employee ID passed is not present, a new profile record will be created
--             Stored Procedure will return the Employee ID and whether a New Employee was created or NOT.
--Author: Priyanka Kuklani
--SAMPLE USAGE:
    --TO UPDATE
        --DECLARE 
        --GeneratedEmployeeID NUMBER :=0;
        --EmployeeExists NUMBER :=0;
        --BEGIN
        --    mbta_createorupdateemployeeprofile (178, 'Zeus Duke', NULL, NULL, 'San Fransisco', NULL, 33203, NULL, GeneratedEmployeeID, EmployeeExists);
        --    DBMS_OUTPUT.PUT_LINE(GeneratedEmployeeID);
        --    DBMS_OUTPUT.PUT_LINE(EmployeeExists);
        --END;
----------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE mbta_CreateOrUpdateEmployeeProfile (
EmpId IN NUMBER,
EmpName IN VARCHAR2,
EmpAge IN NUMBER,
Addr IN VARCHAR2,
EmpCity IN VARCHAR2,
EmpState IN VARCHAR2,
Zip IN NUMBER,
DateOfJoining IN DATE,
DeptName IN VARCHAR2,
GenEmpID OUT NUMBER,
EmpExists OUT NUMBER
)
IS
    deptId NUMBER := 0;
    invalidDeptEx EXCEPTION;
BEGIN
    SELECT COUNT(1) INTO EmpExists FROM MBTA_EMPLOYEE WHERE EmployeeID = EmpId;
    SELECT MIN(NVL(DEPTID, 0)) INTO deptId FROM MBTA_DEPT WHERE ROLE = DeptName;
    IF deptId IS NULL OR deptId <= 0
    THEN 
        RAISE invalidDeptEx;
    END IF;
    IF NVL(EmpExists, 0) > 0
    THEN
        UPDATE MBTA_EMPLOYEE 
        SET 
            DEPTID = DEPTID, 
            NAME = NVL(EmpName, NAME), 
            AGE = NVL(EmpAge, AGE), 
            Address = NVL(Addr, Address), 
            City = NVL(EmpCity, City), 
            State = NVL(EmpState, State),
            ZipCode = NVL(Zip, ZipCode),
            DOJ = NVL(DateOfJoining, DOJ)
        WHERE EmployeeID = EmpId
        RETURNING EmployeeID INTO GenEmpID;
    ELSE
        INSERT INTO MBTA_EMPLOYEE VALUES (EmpId, deptId, NULL, EmpName, EmpAge, Addr, EmpCity, EmpState, Zip, DateOfJoining)
        RETURNING EmployeeID INTO GenEmpID;
    END IF;
    COMMIT;
EXCEPTION
    WHEN invalidDeptEx THEN 
        DBMS_OUTPUT.PUT_LINE('Error: Department does not exist. No updates were made.');
    WHEN OTHERS THEN
        ROLLBACK;
END mbta_CreateOrUpdateEmployeeProfile;
/

/*
--EXAMPLE TO CREATE EMPLOYEE
DECLARE 
    GeneratedEmployeeID NUMBER :=0;
    EmployeeExists NUMBER :=0;
BEGIN
    mbta_CreateOrUpdateEmployeeLogin (0, 'pkuklani', 'Pa$$w0rd.1', GeneratedEmployeeID, EmployeeExists);
    mbta_createorupdateemployeeprofile (GeneratedEmployeeID, 'Priyanka Kuklani', 27, '2765 Boxer Way', 'San Fransisco', 'CA', 33203, TO_DATE('2019-01-01','YYYY-MM-DD'), 'Red Line Train Operators', GeneratedEmployeeID, EmployeeExists);
    DBMS_OUTPUT.PUT_LINE(GeneratedEmployeeID);
    DBMS_OUTPUT.PUT_LINE(EmployeeExists);
END;

--EXAMPLE TO SHOW VALIDATION WHEN USER NAME IS ALREADY TAKEN
DECLARE 
    GeneratedEmployeeID NUMBER :=0;
    EmployeeExists NUMBER :=0;
BEGIN
    mbta_CreateOrUpdateEmployeeLogin (0, 'pkuklani', 'Pa$$w0rd.1', GeneratedEmployeeID, EmployeeExists);
    DBMS_OUTPUT.PUT_LINE(GeneratedEmployeeID);
    DBMS_OUTPUT.PUT_LINE(EmployeeExists);
END;

--EXAMPLE TO UPDATE EMPLOYEE ADDRESS
DECLARE 
    GeneratedEmployeeID NUMBER :=204;
    EmployeeExists NUMBER :=0;
BEGIN
    mbta_createorupdateemployeeprofile (GeneratedEmployeeID, 'Priyanka Kuklani', NULL, '2765 Vendor Way', 'San Fransisco', 'CA', 33203, NULL, 'Red Line Train Operators', GeneratedEmployeeID, EmployeeExists);
END;
select * from mbta_employee where employeeid = 204;
--

--EXAMPLE TO UPDATE PASSWORD
DECLARE 
    GeneratedEmployeeID NUMBER :=0;
    EmployeeExists NUMBER :=0;
BEGIN
    mbta_CreateOrUpdateEmployeeLogin (204, 'pkuklani', 'Pa$$w0rd.1', GeneratedEmployeeID, EmployeeExists);
    DBMS_OUTPUT.PUT_LINE(GeneratedEmployeeID);
    DBMS_OUTPUT.PUT_LINE(EmployeeExists);
END;
select * from mbta_emplogin where employeeid = 204;
*/
-----------------------------------------------------------------------------------------------------------

--Description: Stored Procedure to Create or Update Passenger Login.
--SAMPLE USAGE:
--     DECLARE 
--          GenPassId  NUMBER :=0;
--          LoginExists NUMBER :=0;
--      BEGIN
--          mbta_CreateOrUpdatePassLogin (0, 'userPRI', 'Pa$$w0rd.99', GenPassId, LoginExists);
--          DBMS_OUTPUT.PUT_LINE(genpassid);
--          DBMS_OUTPUT.PUT_LINE(loginexists);
--      END;
---------------------------------------------------------------------------------------------------------------
SET SERVEROUTPUT ON;
create or replace PROCEDURE mbta_CreateOrUpdatePassLogin(
PassId IN NUMBER,
UsrName IN VARCHAR2,
Pwd IN VARCHAR2,
GenPassId OUT NUMBER,
LoginExists OUT NUMBER 
)
IS 
    LastLoginId NUMBER := 0;
    LastPassId NUMBER := 0;
    userNameAlreadyTaken NUMBER := 0;
    userNameAlreadyTakenEx EXCEPTION;
BEGIN
    SELECT COUNT(1) INTO LoginExists FROM MBTA_LOGIN WHERE PASSENGERID = PassId;
    IF NVL(LoginExists, 0) > 0
    THEN
        UPDATE MBTA_LOGIN 
        SET 
            PASSWORD = Pwd
        WHERE PASSENGERID = PassId
        RETURNING PASSENGERID INTO GenPassID;
    ELSE
        SELECT COUNT(1) INTO userNameAlreadyTaken FROM MBTA_LOGIN WHERE UserName = UsrName;
        IF userNameAlreadyTaken > 0
        THEN RAISE userNameAlreadyTakenEx;
        END IF;
        SELECT MAX(LOGINID) INTO LastLoginId FROM MBTA_LOGIN;
        SELECT MAX(PASSENGERID) INTO LastPassId FROM MBTA_LOGIN;
        INSERT INTO MBTA_Login VALUES (LastLoginId + 1, LastPassId + 1, UsrName, Pwd)
        RETURNING PASSENGERID INTO GenPassId;
    END IF;
    COMMIT;
EXCEPTION
    WHEN userNameAlreadyTakenEx THEN
        DBMS_OUTPUT.PUT_LINE('Error: User Name Already Taken. Please try with another user name. No updates were made.');
    WHEN OTHERS THEN
        ROLLBACK;
END mbta_CreateOrUpdatePassLogin;
/

--Description: Stored Procedure to Create or Update Passenger Profile.
SET SERVEROUTPUT ON;
create or replace PROCEDURE mbta_CreateOrUpdatePassProfile (
PassId IN NUMBER,
PassFname IN VARCHAR2,
PassLname IN VARCHAR2,
PassDob IN VARCHAR2,
Addr IN VARCHAR2,
PassCity IN VARCHAR2,
PassState IN VARCHAR2,
Zip IN NUMBER,
GenPassId OUT NUMBER,
PassExists OUT NUMBER
)
AS
BEGIN
    SELECT COUNT(1) INTO PassExists FROM MBTA_PASSENGER WHERE PASSENGERID = PassId;
    IF NVL(PassExists, 0) > 0
    THEN
        UPDATE MBTA_PASSENGER 
        SET 
            PASSENGERFNAME = NVL(PassFname, PASSENGERFNAME), 
            PASSENGERLNAME = NVL(PassLname, PASSENGERLNAME), 
            DOB = NVL(PassDob, DOB),
            Address = NVL(Addr, Address), 
            City = NVL(PassCity, City), 
            State = NVL(PassState, State),
            ZipCode = NVL(Zip, ZipCode)
        WHERE PASSENGERID = PassId
        RETURNING PASSENGERID INTO GenPassId;
    ELSE
        INSERT INTO MBTA_PASSENGER VALUES (PassId, PassFname, PassLname, PassDob, Addr, PassCity, PassState, Zip)
        RETURNING PassengerID INTO GenPassID;
    END IF;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
END mbta_CreateOrUpdatePassProfile;
/

/*
--EXAMPLE TO CREATE A NEW PASSENGER
     DECLARE 
          GenPassId  NUMBER :=0;
          LoginExists NUMBER :=0;
      BEGIN
          mbta_CreateOrUpdatePassLogin (0, 'pkuklani', 'Pa$$w0rd.99', GenPassId, LoginExists);
          mbta_CreateOrUpdatePassProfile(GenPassId, 'Priyanka', 'Kuklani', TO_DATE('1994-11-18', 'YYYY-MM-DD'), '2765 Vendor Way', 'San Fransisco', 'CA', 33203, GenPassId, LoginExists);
          DBMS_OUTPUT.PUT_LINE(genpassid);
          DBMS_OUTPUT.PUT_LINE(loginexists);
      END;
      
--EXAMPLE TO UPDATE EXISTING PASSENGER DATA (ADDRESS)
     DECLARE 
          GenPassId  NUMBER :=0;
          LoginExists NUMBER :=0;
      BEGIN
          mbta_CreateOrUpdatePassProfile(1999, 'Priyanka', 'Kuklani', TO_DATE('1994-11-18', 'YYYY-MM-DD'), '2765 Boxer Way', 'San Fransisco', 'CA', 33203, GenPassId, LoginExists);
          DBMS_OUTPUT.PUT_LINE(genpassid);
          DBMS_OUTPUT.PUT_LINE(loginexists);
      END;
      
--EXAMPLE TO UPDATE PASSENGER PASSWORD
--     DECLARE 
--          GenPassId  NUMBER :=0;
--          LoginExists NUMBER :=0;
--      BEGIN
--          mbta_CreateOrUpdatePassLogin (1999, 'pkuklani', 'Pa$$w0rd.1', GenPassId, LoginExists);
          DBMS_OUTPUT.PUT_LINE(genpassid);
          DBMS_OUTPUT.PUT_LINE(loginexists);
      END;   
*/

---------------------------------------------------------------------------------------------------------------------------------
/* Procedure to insert value in mbta train current status
*/

Create or replace Procedure insert_into_mbta_traincurrentstatus(
latitude mbta_traincurrentstatus.latitude%type,
longitude mbta_traincurrentstatus.longitude%type,
intrainid mbta_traincurrentstatus.trainid%type
)
as
null_exception_latitude exception;
null_exception_longitude exception;
null_exception_trainid exception;
train_idnotfound exception;
v_count number; 
begin
select count(*) into v_count from mbta_traininfo t1 where t1.trainid=intrainid;
if(intrainid is null) then
    raise null_exception_trainid;
elsif(v_count=0) then
    raise train_idnotfound;
elsif(latitude is null) then
    raise null_exception_latitude;
elsif(longitude is null) then
    raise null_exception_longitude;
else
    insert into mbta_traincurrentstatus values(seq_mbta_traincurrentstatus.nextval,latitude,longitude,intrainid);
    commit;
end if;
/*   Exceptions    */

Exception 
        when 
            null_exception_trainid 
        then
            raise_application_error(-20009,'Train ID cannot be null');
        when 
            null_exception_latitude
        then
            raise_application_error(-20009,'Latitude cannot be null');
        when 
            null_exception_longitude
        then
            raise_application_error(-20009,'Longitude cannot be null');  
        when 
            train_idnotfound
        then
            raise_application_error(-20001,'This type of train is not found');
end; 
/

/*  WRONG TRAIN ID*/
--call insert_into_mbta_traincurrentstatus(23.34,34.54,500);

/* Null input */
--call insert_into_mbta_traincurrentstatus(23.34,null,500);


--call insert_into_mbta_traincurrentstatus(23.34,null,500);


--------------------------------------------------------------------------------------------------------
/* Procedure to insert Scehdule of the train 

Used max to get last schedule id not Sequence
)*/


create or replace procedure insert_schedule(
train_id  mbta_schedule.trainid%type,       --1
route_id mbta_schedule.routeid%type,        --2
train_time mbta_schedule.traintime%type     --3
)
as
null_exception_trainid exception;
null_exception_routeid exception;
null_exception_traintime exception;
invalid_trainid exception;
invalid_routeid exception;
invalid_timeformat exception;
trainid_count number;
routeid_count number;
scheduleid_fetch number;
 CURSOR train_id_count_cursor
    IS
    select count(*) into trainid_count from mbta_traininfo where trainid=train_id;
 CURSOR route_id_count_cursor
    IS
    select count(*) into routeid_count from mbta_routeinfo where routeid=route_id;
begin
open train_id_count_cursor;
open route_id_count_cursor;
fetch train_id_count_cursor into trainid_count;
fetch route_id_count_cursor into routeid_count;
if(train_id is null) then
    raise null_exception_trainid;
elsif(route_id is null) then
    raise null_exception_routeid;
elsif(train_time is null) then
    raise null_exception_traintime;
elsif(trainid_count=0)then
    raise invalid_trainid;
elsif(routeid_count=0) then
    raise invalid_routeid;
elsif(check_date_format(train_time)=0) then
    raise invalid_timeformat;
else
    select scheduleid into scheduleid_fetch from mbta_schedule where scheduleid in (select max(scheduleid) from mbta_schedule);
    scheduleid_fetch:=scheduleid_fetch+1;
    insert into mbta_schedule values(scheduleid_fetch,train_id,route_id,train_time);
    commit;
end if;
 Exception
    when 
        null_exception_trainid 
    then 
        raise_application_error(-20009,'Train ID is empty,please enter Train ID');
    when
        null_exception_routeid
    then 
        raise_application_error(-20009,'Route ID cannot be empty,please enter Route ID');
    when 
        null_exception_traintime
    then
        raise_application_error(-20009,'Train Time is empty please enter time');
    when 
        invalid_trainid
    then
        raise_application_error(-20000, 'Train ID is not in our records please enter valid Train ID.');
    when 
        invalid_routeid
    then
        raise_application_error(-20000,'Route ID is not in our records please enter valid Route ID');
    when
        invalid_timeformat
    then
        raise_application_error(-20000,'Invalid time format.Please enter in this format HH:MM:SS');
close train_id_count_cursor;
end;
/


--call insert_schedule(2,3,'12:34:34');
-- Null values
--call insert_schedule(null,3,'12:34:45 PM');

-- Wrong Time Format
--call insert_schedule(34,3,'12/34/54');

---------------------------------------------------------------------------------------------------------------------------

-- Insert Train info
Create or replace procedure insert_into_traininfo(
year_ofmanufacturing mbta_traininfo.yearofmanufacturing%type,
last_servicedate mbta_traininfo.lastservicedate%type,
capacity mbta_traininfo.capacity%type,
employeeid mbta_traininfo.employeeid%type
)
as
next_trainid number;
next_trainserialno number;
validate_manu_service exception;
null_exception_yearofmanufacturing exception;
null_exception_lastservicedate exception;
null_exception_capacity exception;
null_exception_employeeid exception;
invalid_employeeid exception;
begin
next_trainid:=next_trainid_traininfo;
next_trainserialno:=next_trainserialno_traininfo;
--check if service date is more than manufacturing date
if(year_ofmanufacturing is null)then
    raise null_exception_yearofmanufacturing;
elsif(last_servicedate is null) then
    raise null_exception_lastservicedate;
elsif(capacity is null) then
    raise null_exception_capacity;
elsif(employeeid is null) then
    raise null_exception_employeeid;
else
    if(check_service_manu(year_ofmanufacturing,last_servicedate)=1) then
    if(check_employee_id(employeeid)=1) then
        insert into mbta_traininfo values(next_trainid,next_trainserialno,year_ofmanufacturing,last_servicedate,capacity,employeeid);
        commit;
    else
            raise invalid_employeeid;
    end if;
    else
        raise validate_manu_service;
    end if;
end if;
exception 
    when validate_manu_service then
    raise_application_error(-20000,'Check manufacturing date and service date. Service date should be greater than manufacturing date');
    when null_exception_yearofmanufacturing then
    raise_application_error(-20000,'Year of manufacturing cannot be null');
    when null_exception_capacity  then
    raise_application_error(-20000,'Capacity of train cannot be null or 0');
    when null_exception_employeeid then
    raise_application_error(-20000,'Employee ID cannot be null');
    when null_exception_lastservicedate then
    raise_application_error(-20000,'Last Service Date cannot be null');
    when invalid_employeeid then
    raise_application_error(-20001,'Invalid Employee Id');
end;
/



/*
call insert_into_traininfo(2020,'11-Sep-21',23,93);

call insert_into_traininfo(2022,'11-Sep-21',23,93);

call insert_into_traininfo(null,'11-Sep-21',23,93);

call insert_into_traininfo(2022,null,23,93);

call insert_into_traininfo(2022,'11-Sep-21',null,93);

call insert_into_traininfo(2020,'11-Sep-21',23,null);

call insert_into_traininfo(2020,'11-Sep-21',23,1999);
*/



-- Check constraint 
Create or replace procedure insert_into_mbta_station(
route_id mbta_routeinfo.routeid%type,
station_name mbta_station.StationName%type,
latitude mbta_station.latitude%type,
longitude mbta_station.longitude%type,
stationzipcode mbta_station.stationZipCode%type,
stationstatus mbta_station.status%type,
stationseq mbta_station.stationseq%type,
prevstationseq mbta_station.prevseq%type
)
as
null_routeid exception;
null_stationname exception;
null_latitude exception;
null_longitude exception;
null_zipcode exception;
null_stationstatus exception;
begin
if(route_id is null)then
raise null_routeid;
elsif(station_name is null) then
raise null_stationname;
elsif(latitude is null)then
raise null_latitude;
elsif(longitude is null) then
raise null_longitude;
elsif(stationzipcode is null) then
raise null_zipcode;
elsif(stationstatus is null) then
raise null_stationstatus;
else
insert into mbta_station values(seq_mbta_station.nextval,route_id,station_name,latitude,longitude,stationzipcode,stationstatus,stationseq,prevstationseq);
commit;
end if;
end;
/

--call insert_into_mbta_station(7,'Lechmere',02115,42.370949,-71.07964,'Y',-1,17);


-- Get Route


SET SERVEROUTPUT ON;
create or replace procedure get_miles(from_station mbta_station.stationname%type,to_station mbta_station.stationname%type)
as
lat1 number(20,18);
lat2 number(20,18);
long1 number(20,18);
long2 number(20,18);
dist number(8,6);
begin 
select latitude,longitude into lat1,long1 from mbta_station where stationname=from_station;
select latitude,longitude into lat2,long2 from mbta_station where stationname=to_station;
 select distance(lat1,long1,lat2,long2) into dist from dual;
dbms_output.put_line('Distance from ' || from_station || ' to ' || to_station || ' is ' ||dist ||' kms'); 
dist:=dist*0.621371;
dbms_output.put_line('Distance from '|| from_station || ' to '|| to_station || ' is ' || dist || ' miles'); 

end;
/


--call get_miles('Copley','Government Center');



-----------------------Next Station-------------------------
set serveroutput on;
create or replace procedure get_next_station(current_s mbta_station.stationname%type,to_s mbta_station.stationname%type)
as
currentseq number;
currentpseq number;
toseq number;
topseq number;
stationans varchar(50);
begin
select stationseq,prevseq into currentseq,currentpseq from mbta_station where stationname=current_s;
select stationseq,prevseq into toseq,topseq from mbta_station where stationname=to_s;

if(currentseq=toseq)then
dbms_output.put_line('This is last station of the route');
elsif(currentseq>toseq) then
select stationname into stationans from mbta_station where stationseq=currentseq-1;
dbms_output.put_line('Next Station '||stationans);
elsif(currentseq<toseq) then
select stationname into stationans from mbta_station where stationseq=currentseq+1;
dbms_output.put_line('Next Station '||stationans);
end if;
end;
/


/*
call get_next_station('Copley','Mission Park');

call get_next_station('Mission Park','Copley');

call get_next_station('Heath Street','Heath Street');

call get_next_station('Lechmere','Lechmere');
*/




------------------GET WHOLE ROUTE-------------

set serveroutput on;

create or replace procedure get_route(from_s mbta_station.stationname%type,to_s mbta_station.stationname%type)
as
currentseq number;
currentpseq number;
toseq number;
topseq number;
stationans varchar(50); 
begin
select stationseq,prevseq into currentseq,currentpseq from mbta_station where stationname=from_s;
select stationseq,prevseq into toseq,topseq from mbta_station where stationname=to_s;
if(currentseq=toseq)then
dbms_output.put_line('This is last station of the route');

-- Lechmere To heath Street
elsif(currentseq=-1)then
select count(*) into currentseq from mbta_station where routeid=(select routeid from mbta_station where stationname=from_s);
for a in toseq .. currentseq-1 loop
currentseq:=currentseq-1;
select stationname into stationans from mbta_station where stationseq=currentseq;
dbms_output.put_line(stationans);
end loop;


-- Heath Street to lechmere
elsif(currentpseq=0)then

select count(*) into toseq from mbta_station where routeid=(select routeid from mbta_station where stationname=from_s);
for a in currentseq .. toseq loop
if (currentseq=18) then
select stationname into stationans from mbta_station where stationseq=-1;
dbms_output.put_line(stationans);
else
select stationname into stationans from mbta_station where stationseq=currentseq;
currentseq:=currentseq+1;
dbms_output.put_line(stationans);
end if;
end loop;


elsif(currentseq>toseq) then
for a in toseq .. currentseq loop
select stationname into stationans from mbta_station where stationseq=currentseq;
currentseq:=currentseq-1;
dbms_output.put_line(stationans);
end loop;
elsif(currentseq<toseq) then
for a in currentseq .. toseq loop
select stationname into stationans from mbta_station where stationseq=currentseq;
currentseq:=currentseq+1;
dbms_output.put_line(stationans);
end loop;
end if;
end;
/

/*call get_route('Copley','Mission Park');

call get_route('Mission Park','Copley');

call get_route('Heath Street','Heath Street');

call get_route('Lechmere','Lechmere');

call get_route('Heath Street','Lechmere');

call get_route('Lechmere','Heath Street');
*/

SET SERVEROUTPUT ON;
create or replace PACKAGE passenger_charlie AS 
   FUNCTION get_balance(passid in mbta_charlie.passengerid%type) RETURN NUMBER;
   PROCEDURE print_balance(passid mbta_charlie.passengerid%type); 
   PROCEDURE add_balance(passid in mbta_charlie.passengerid%type, rechargeAmount in mbta_charlie.balance%type);
   PROCEDURE deduct_balance(passid in mbta_charlie.passengerid%type, swipeAmount in mbta_charlie.balance%type);
END passenger_charlie; 
/
SET SERVEROUTPUT ON;
create or replace PACKAGE BODY passenger_charlie AS  

    FUNCTION get_balance(passid in mbta_charlie.passengerid%type)
    RETURN NUMBER
    IS
        charlie_balance NUMBER := 0;
        is_record_present NUMBER := 0;
        invalid_passid_ex EXCEPTION;
        no_charlie_ex EXCEPTION;
    BEGIN
        IF check_pass_id(passid) = 0
            THEN RAISE invalid_passid_ex;
        END IF;
        SELECT count(1) INTO is_record_present from MBTA_CHARLIE where passengerid=passid;
        IF is_record_present = 0 
            THEN RAISE no_charlie_ex; 
        END IF;
        SELECT SUM(BALANCE) INTO charlie_balance from MBTA_CHARLIE where passengerid=passid;
        dbms_output.put_line('Balance: '|| charlie_balance); 
        RETURN charlie_balance;
        EXCEPTION
            WHEN invalid_passid_ex THEN dbms_output.put_line('Invalid Passenger ID. Passenger record does not exist.'); 
            WHEN no_charlie_ex THEN dbms_output.put_line('Balance cannot be retrieved. No Charlie Card present for this Passenger ID'); 
            RETURN 0;
    END get_balance;
   
    PROCEDURE print_balance(passid in mbta_charlie.passengerid%type)
    IS
        charlie_balance NUMBER := 0;
        is_record_present NUMBER := 0;
        invalid_passid_ex EXCEPTION;
        no_charlie_ex EXCEPTION;
    BEGIN
        IF check_pass_id(passid) = 0
            THEN RAISE invalid_passid_ex;
        END IF;
        SELECT count(1) INTO is_record_present from MBTA_CHARLIE where passengerid=passid;
        IF is_record_present = 0 
            THEN RAISE no_charlie_ex; 
        END IF;
        SELECT SUM(BALANCE) INTO charlie_balance from MBTA_CHARLIE where passengerid=passid;
        dbms_output.put_line('Balance: '|| charlie_balance); 
        EXCEPTION
            WHEN invalid_passid_ex THEN dbms_output.put_line('Invalid Passenger ID. Passenger record does not exist.'); 
            WHEN no_charlie_ex THEN dbms_output.put_line('Balance cannot be retrieved. No Charlie Card present for this Passenger ID'); 
    END print_balance;
    
    PROCEDURE add_balance(passid in mbta_charlie.passengerid%type, rechargeAmount in mbta_charlie.balance%type)
    IS
        new_balance NUMBER := 0;
        is_record_present NUMBER := 0;
        invalid_amount_ex EXCEPTION;
        invalid_passid_ex EXCEPTION;
        no_charlie_ex EXCEPTION;
    BEGIN
        IF check_pass_id(passid) = 0
            THEN RAISE invalid_passid_ex;
        END IF;
        SELECT count(1) INTO is_record_present from MBTA_CHARLIE where passengerid=passid;
        IF is_record_present = 0 
            THEN RAISE no_charlie_ex; 
        END IF;
        IF rechargeAmount <= 0 
            THEN RAISE invalid_amount_ex; 
        END IF;
        UPDATE MBTA_CHARLIE SET Balance = NVL(Balance, 0) + NVL(rechargeAmount, 0) WHERE passengerid=passid;
        SELECT SUM(BALANCE) INTO new_balance from MBTA_CHARLIE where passengerid=passid;
        dbms_output.put_line('New Balance: '|| new_balance); 
        COMMIT;
        EXCEPTION
            WHEN invalid_amount_ex THEN dbms_output.put_line('Invalid input. Please enter a non-zero recharge amount.'); 
            WHEN invalid_passid_ex THEN dbms_output.put_line('Invalid Passenger ID. Passenger record does not exist.'); 
            WHEN no_charlie_ex THEN dbms_output.put_line('No Charlie Card present for this Passenger ID. Recharge failed.');         
    END add_balance;

    PROCEDURE deduct_balance(passid in mbta_charlie.passengerid%type, swipeAmount in mbta_charlie.balance%type)
    IS
        new_balance NUMBER := 0;
        cur_balance Number :=0;
        is_record_present NUMBER := 0;
        invalid_amount_ex EXCEPTION;
        invalid_passid_ex EXCEPTION;
        no_charlie_ex EXCEPTION;
        low_balance_ex EXCEPTION;
    BEGIN
        IF check_pass_id(passid) = 0
            THEN RAISE invalid_passid_ex;
        END IF;
        SELECT count(1) INTO is_record_present from MBTA_CHARLIE where passengerid=passid;
        IF is_record_present = 0 
            THEN RAISE no_charlie_ex; 
        END IF;
        IF swipeAmount <= 0 
            THEN RAISE invalid_amount_ex; 
        END IF;
        
        SELECT passenger_charlie.get_balance(passid) INTO cur_balance FROM DUAL;
        If cur_balance < swipeAmount
            then RAISE low_balance_ex;
        END IF;
        
        UPDATE MBTA_CHARLIE SET Balance = NVL(Balance, 0) - NVL(swipeAmount, 0) WHERE passengerid=passid;
        SELECT SUM(BALANCE) INTO new_balance from MBTA_CHARLIE where passengerid=passid;
        dbms_output.put_line('Transaction successful. New Balance: '|| new_balance); 
        COMMIT;
        EXCEPTION
            WHEN invalid_amount_ex THEN dbms_output.put_line('Invalid input. Please enter a non-zero swipe amount.'); 
            WHEN invalid_passid_ex THEN dbms_output.put_line('Invalid Passenger ID. Passenger record does not exist.'); 
            WHEN no_charlie_ex THEN dbms_output.put_line('No Charlie Card present for this Passenger ID. Try a different mode of payment.');
            WHEN low_balance_ex THEN dbms_output.put_line('Transaction failed. Low balance');
    END deduct_balance;

END passenger_charlie; 
/


--call passenger_charlie.print_balance(-1);
--call passenger_charlie.add_balance(218, 100);
--SELECT passenger_charlie.fget_balance(218) FROM DUAL;


--select * from mbta_charlie where passengerid = 872;

--call passenger_charlie.deduct_balance(872, 3);
--call passenger_charlie.deduct_balance(1872563638, 3);
--call passenger_charlie.deduct_balance(1, 3);
--call passenger_charlie.deduct_balance(872, -3);
--call passenger_charlie.deduct_balance(872, 1000);



  CREATE OR REPLACE FORCE EDITIONABLE VIEW "ADMIN"."PASSENGER_AGE" ("PASSENGERFNAME", "PASSENGERLNAME", "DOB", "CURRENT_AGE") DEFAULT COLLATION "USING_NLS_COMP"  AS 
  select mbta_passenger.passengerfname, mbta_passenger.passengerlname, 
mbta_passenger.dob,
trunc(months_between(sysdate,mbta_passenger.dob) / 12)
as current_age from mbta_passenger
;
--------------------------------------------------------
--  File created - Wednesday-December-15-2021   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for View TRAIN_AGE
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "ADMIN"."TRAIN_AGE" ("TRAINID", "YEAROFMANUFACTURING", "CURRENT_TRAIN_AGE") DEFAULT COLLATION "USING_NLS_COMP"  AS 
  select mbta_traininfo.trainid, mbta_traininfo.yearofmanufacturing,
trunc(EXTRACT(Year FROM sysdate)) - EXTRACT(Year from (to_date(mbta_traininfo.yearofmanufacturing, 'yyyy')))
as current_train_age from mbta_traininfo
;


--------------------------------------------------------
--  File created - Wednesday-December-15-2021   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for View MBTA_MAXIMUM_REVENUE_PASSENGERS
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "ADMIN"."MBTA_MAXIMUM_REVENUE_PASSENGERS" ("TRANCHEID", "PASSENGERFNAME", "PASSENGERLNAME") DEFAULT COLLATION "USING_NLS_COMP"  AS 
  SELECT t.trancheid, p.passengerfname, p.passengerlname
FROM MBTA_Passenger p
right join MBTA_Transaction t
on p.PassengerID = t.PassengerID
group by t.trancheid, p.passengerfname, p.passengerlname
having count(*)>1
order by p.passengerlname
;


--------------------------------------------------------
--  File created - Wednesday-December-15-2021   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for View MBTA_PASSENGER_ALL_TRANSACTIONS
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "ADMIN"."MBTA_PASSENGER_ALL_TRANSACTIONS" ("PASSENGERFNAME", "PASSENGERLNAME", "CHARLIEID", "TRANCHEID", "TRANSACTIONID", "PASSENGERID") DEFAULT COLLATION "USING_NLS_COMP"  AS 
  select p.passengerfname, p.passengerlname, c.charlieid, c.trancheid, t.transactionid, t.passengerid 
from mbta_charlie c
join mbta_transaction t
on t.passengerid = c.passengerid
join mbta_passenger p
on t.passengerid= p.passengerid
order by passengerid
;

--------------------------------------------------------
--  DDL for View MBTA_CHARLIE_LOW_BALANCE
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "ADMIN"."MBTA_CHARLIE_LOW_BALANCE" ("BALANCE", "PASSENGERID", "CHARLIEID", "PASSENGERFNAME", "PASSENGERLNAME") DEFAULT COLLATION "USING_NLS_COMP"  AS 
  select c.balance, c.passengerid, c.charlieid, p.passengerfname, p.passengerlname from mbta_charlie c
inner join mbta_passenger p
on
c.passengerid = p.passengerid
where c.balance<10
;

--------------------------------------------------------
--  DDL for View MBTA_EMPLOYEEPROFILE
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "ADMIN"."MBTA_EMPLOYEEPROFILE" ("EMPLOYEEID", "NAME", "DEPTNAME", "ROLE", "AGE", "ADDRESS", "CITY", "STATE", "ZIPCODE", "DATEOFJOINING", "NOOFMONTHSINSERVICE", "TRAINSERIALNO") DEFAULT COLLATION "USING_NLS_COMP"  AS 
  SELECT ME.EMPLOYEEID, 
        ME.NAME, 
        MDT.DEPTNAME, 
        MD.ROLE, 
        ME.AGE, 
        ME.ADDRESS, 
        ME.CITY, 
        ME.STATE, 
        ME.ZIPCODE, 
        ME.DOJ AS DATEOFJOINING,
        FLOOR(MONTHS_BETWEEN(SYSDATE, ME.DOJ)) AS NOOFMONTHSINSERVICE,
        MT.TRAINSERIALNO 
FROM MBTA_EMPLOYEE ME
JOIN MBTA_DEPT MD
    ON ME.DEPTID = MD.DEPTID
JOIN MBTA_DEPTTYPE MDT
    ON MD.DEPTTYPEID = MDT.DEPTTYPEID
LEFT OUTER JOIN MBTA_TRAININFO MT
    ON MT.TRAINID = ME.TRAINID
;

--------------------------------------------------------
--  DDL for View MBTA_PASSENGERPROFILE
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "ADMIN"."MBTA_PASSENGERPROFILE" ("USERNAME", "PASSENGERID", "PASSENGERFNAME", "PASSENGERLNAME", "DOB", "ADDRESS", "CITY", "BALANCE") DEFAULT COLLATION "USING_NLS_COMP"  AS 
  SELECT 

        ml.username,
        mp.passengerid,
        mp.passengerfname,
        mp.passengerlname,
        mp.dob,
        mp.address,
        mp.city,
        mc.balance
              
FROM mbta_passenger MP
JOIN MBTA_Login ML
    ON mp.passengerid = ml.passengerid   
LEFT OUTER JOIN mbta_charlie MC
ON mc.passengerid=mp.passengerid
;